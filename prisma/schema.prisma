generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model AdminSettings {
  id       Int    @id @default(1)
  pin      String
  password String
}

model FeatureSettings {
  id                      Int     @id @default(1)
  randomPickerEnabled     Boolean @default(true)
  upsetAlertsEnabled      Boolean @default(true)
  powerRankingsEnabled    Boolean @default(true)
  matchupSimulatorEnabled Boolean @default(true)
}

model User {
  id                Int      @id @default(autoincrement())
  username          String   @unique
  password          String
  firstName         String
  lastName          String
  avatarType        String   @default("initials") // "initials", "emoji", "mdi"
  avatarValue       String?  // emoji or mdi icon path
  avatarColor       String   @default("#3b82f6") // hex color
  mustChangePassword Boolean @default(true)
  passwordResetRequested Boolean @default(false)
  canUseRandomPicker Boolean @default(true)
  canSeeUpsetAlerts  Boolean @default(true)
  canSeePowerRankings Boolean @default(true)
  canUseMatchupSim   Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  picks             Pick[]
  chatMessages      ChatMessage[]
  lunchWinner       LunchTracker[] @relation("Winner")
  lunchLoser        LunchTracker[] @relation("Loser")
}

model Pick {
  id              Int      @id @default(autoincrement())
  userId          Int
  week            Int
  season          Int
  gameId          String   // ESPN game ID
  pickedTeamId    String   // ESPN team ID of picked team
  mondayNightGuess Int?    // Total points guess for Monday games
  lockedAt        DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, week, season, gameId])
  @@index([week, season])
  @@index([userId, week, season])
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  userId    Int
  week      Int
  season    Int
  message   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([week, season, createdAt])
}

model ChatArchive {
  id        Int      @id @default(autoincrement())
  week      Int
  season    Int
  messages  String   // JSON string of archived messages
  archivedAt DateTime @default(now())

  @@unique([week, season])
}

model LunchTracker {
  id        Int      @id @default(autoincrement())
  week      Int
  season    Int
  winnerId  Int
  loserId   Int
  paid      Boolean  @default(false)
  paidDate  DateTime?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  winner    User     @relation("Winner", fields: [winnerId], references: [id])
  loser     User     @relation("Loser", fields: [loserId], references: [id])

  @@unique([week, season])
  @@index([winnerId])
  @@index([loserId])
}

model WeekStatus {
  id          Int      @id @default(autoincrement())
  week        Int
  season      Int
  status      String   @default("upcoming") // "upcoming", "active", "completed"
  lockTime    DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([week, season])
}

model SystemBackup {
  id          Int      @id @default(autoincrement())
  filename    String
  size        Int
  createdAt   DateTime @default(now())
  createdBy   String   @default("admin")
}
